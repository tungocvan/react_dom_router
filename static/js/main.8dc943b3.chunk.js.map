{"version":3,"sources":["App.js","serviceWorker.js","Store.js","index.js"],"names":["Child","match","params","id","ComponentWithRegex","direction","App","to","path","component","Component","Boolean","window","location","hostname","redux","require","INITIAL_STATE","name","age","color","sothich","store","createStore","state","action","type","console","log","getItem","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8QAyCA,SAASA,EAAT,GAA2B,IAAVC,EAAS,EAATA,MACf,OACE,6BACE,mCAASA,EAAMC,OAAOC,KAK5B,SAASC,EAAT,GAAwC,IAAVH,EAAS,EAATA,MAC5B,OACE,6BACE,0DAAgCA,EAAMC,OAAOG,YAIpCC,M,iLAnDX,OACE,kBAAC,IAAD,KACA,6BACE,wCACA,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,YAAT,YAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,iBAAT,iBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,iBAAT,kBAIJ,kBAAC,IAAD,CAAOC,KAAK,OAAOC,UAAWT,IAQ9B,kBAAC,IAAD,CACEQ,KAAK,8BACLC,UAAWL,U,GA/BHM,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASb,MACvB,2D,ukBChBN,IAAIc,EAAQC,EAAQ,IAEdC,EAAgB,CAClBC,KAAM,OACNC,IAAK,GACLC,MAAM,CAAC,QAAQ,OAAO,MACtBC,QAAQ,CAAC,IAAI,IAAI,MAqBNC,EADHP,EAAMQ,YAjBD,WAAoC,IAAnCC,EAAkC,uDAA1BP,EAAeQ,EAAW,uCAChD,OAAQA,EAAOC,MACX,IAAK,WAIL,OAHIC,QAAQC,IAAI,gGAA6DH,EAAOI,SAG7E,EAAP,GAAWZ,EAAX,CAAyBC,KAAK,UAAUC,IAAI,GAAGC,MAAM,GAAD,mBAAKH,EAAcG,OAAnB,CAAyB,OAAO,WACpF,IAAK,UAID,OAHAO,QAAQC,IAAI,gGAA6DH,EAAOI,UAChFL,EAAK,KAAOP,EAAP,CAAqBC,KAAK,gBAAgBC,IAAI,GAAGC,MAAM,GAAD,mBAAKH,EAAcG,OAAnB,CAAyB,MAAM,UACpFC,QAAN,sBAAmBG,EAAMH,SAAzB,CAAiC,IAAI,MAC9BG,EACX,QACI,OAAOA,K,QCfjBM,IAASC,OACP,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,EAAD,OAEJU,SAASC,eAAe,SFoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.8dc943b3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n      <div>\n        <h2>Accounts</h2>\n        <ul>\n          <li>\n            <Link to=\"/netflix\">Netflix</Link>\n          </li>\n          <li>\n            <Link to=\"/zillow-group\">Zillow Group</Link>\n          </li>\n          <li>\n            <Link to=\"/yahoo\">Yahoo</Link>\n          </li>\n          <li>\n            <Link to=\"/modus-create\">Modus Create</Link>\n          </li>\n        </ul>\n\n        <Route path=\"/:id\" component={Child} />\n\n        {/*\n           It's possible to use regular expressions to control what param values should be matched.\n              * \"/order/asc\"  - matched\n              * \"/order/desc\" - matched\n              * \"/order/foo\"  - not matched\n        */}\n        <Route\n          path=\"/order/:direction(asc|desc)\"\n          component={ComponentWithRegex}\n        />\n      </div>\n    </Router>\n   )\n  }\n}\nfunction Child({ match }) {\n  return (\n    <div>\n      <h3>ID: {match.params.id}</h3>\n    </div>\n  );\n}\n\nfunction ComponentWithRegex({ match }) {\n  return (\n    <div>\n      <h3>Only asc/desc are allowed: {match.params.direction}</h3>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// bài 126\n//import {createStore} from \"redux\";\nvar redux = require('redux');\n\nconst INITIAL_STATE = {\n    name: 'Luat',\n    age: 18,\n    color:['trang','xanh','do'],\n    sothich:['3','4','5']\n};\n \n const reducer = (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case 'ADD_DATA':\n            console.log(\"Ket Noi Thanh Cong AddData nhận dữ liệu vào để thêm mới: \"+ action.getItem);\n\n        // có thể thay đổi state trong đây            \n        return {...INITIAL_STATE,name:'Van-Add',age:20,color:[...INITIAL_STATE.color,'hong','vang'] }\n        case 'getData':\n            console.log(\"Ket Noi Thanh Cong getData nhận dữ liệu vào để thêm mới: \"+ action.getItem); \n            state = {...INITIAL_STATE,name:'Minh Get Data',age:30,color:[...INITIAL_STATE.color,'tim','do']};\n            state.sothich =[...state.sothich,'6','7']\n            return state\n        default:\n            return state\n    }\n}\n\nlet store = redux.createStore(reducer);\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport  store from \"./Store\";\nimport { Provider } from \"react-redux\";\n\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n  document.getElementById(\"root\")\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}